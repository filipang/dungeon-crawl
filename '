/*******************************************************************************
* 
* FILENAME : creature.c
*
* DESCRIPTION : Source file containing creature functions
*
* AUTHOR : filipang           
* 
* START DATE :    11/11/2021
*
*******************************************************************************/


int creatureCreate()
{
	return transformCreate(OBJECT_TYPE_CREATURE);
}

void creatureDelete(int id)
{
	transformDelete(id, OBJECT_TYPE_CREATURE);
}

Creature *creatureGet(int id)
{
	return (Creature *)transformGet(id, OBJECT_TYPE_CREATURE);
}

void creatureMove(Creature *creature_ptr)
{
	PersistentGameState *state = memoryGetPersistentGameState();
	
	transformMoveDirection(creature_ptr->position_delta,  
						   state->game_delta_time * 
						   creature_ptr->movement_speed,
						   (Transform *)creature_ptr);
}

void creatureCreatePlayer(vector2f position)
{

	PersistentGameState *state = memoryGetPersistentGameState();
	int creature_id = creatureCreate();
	state->player.creature_id = creature_id;
	Creature *creature_ptr = creatureGet(creature_id);

	Transform *transform = (Transform *)creature_ptr;

	transform->position = position;

	transform->render.w = 32.0;
	transform->render.h = 50.0;

	transform->collider.w = 24.0;
	transform->collider.h = 46.0;

	creature_ptr->movement_speed = 180.0;	
	creature_ptr->type = CREATURE_PLAYER;
	creature_ptr->level = state->current_level;
	creature_ptr->clip = CLIP_PLAYER;
}

void creatureCreateEnemy(vector2f position)
{
	PersistentGameState *state = memoryGetPersistentGameState();
	int creature_id = creatureCreate();
	Creature *creature_ptr = creatureGet(creature_id);
	Transform *transform = (Transform *)creature_ptr;
	Map *map_ptr = mapGetCurrent();

	transform->position = position;

	transform->render.w = 32.0;
	transform->render.h = 50.0;

	transform->collider.w = 24.0;
	transform->collider.h = 46.0;

	creature_ptr->movement_speed = 160.0;	
	creature_ptr->type = CREATURE_ENEMY;
	creature_ptr->level = state->current_level;
	creature_ptr->clip = CLIP_ENEMY;
}

void creatureProcessPlayer()
{
	PersistentGameState *state = memoryGetPersistentGameState();
	InputState *input = memoryGetInputState();
	Creature *player_creature = creatureGet(state->player.creature_id);

	vector2f delta =  
	{
		!!input->move_right.key_hold - !!input->move_left.key_hold,
		!!input->move_down.key_hold - !!input->move_up.key_hold
	};

	player_creature->position_delta = delta;
	
	if(delta.x != 0 || delta.y != 0)
	{
		player_creature->animation_state = ANIMATION_STATE_WALK;
	}
	else
	{
		player_creature->animation_state = ANIMATION_STATE_IDLE;
	}
	creatureMove(player_creature);
	
	if(!!input->move_right.key_hold - !!input->move_left.key_hold != 0 ||
	   !!input->move_down.key_hold - !!input->move_up.key_hold != 0)
		state->player_action = 1;
	else
		state->player_action = 0;		
			
	
}

Creature *creatureGetPlayer()
{
	PersistentGameState *state = memoryGetPersistentGameState();
	return creatureGet(state->player.creature_id);
}

void creatureProcessEnemy(int id)
{
	PersistentGameState *state = memoryGetPersistentGameState();
	Creature *player_creature = creatureGet(state->player.creature_id);
	Creature *enemy_creature = creatureGet(id);
	
	vector2f delta = 
	{
		player_creature->position.x -
		enemy_creature->position.x, 
		player_creature->position.y -
		enemy_creature->position.y
	};
	
	enemy_creature->position_delta = delta;

	if(delta.x != 0 || delta.y != 0)
	{
		enemy_creature->animation_state = ANIMATION_STATE_WALK;
	}
	else
	{
		enemy_creature->animation_state = ANIMATION_STATE_IDLE;
	}

	creatureMove(enemy_creature);
}

void creatureProcess(int id)
{
	Creature *creature_ptr = creatureGet(id);
	switch(creature_ptr->type)
	{
		case CREATURE_PLAYER:
			creatureProcessPlayer();
			break;
		case CREATURE_ENEMY:
			creatureProcessEnemy(id);
			break;
		default:
			printf("Unknown creature type %d\n", creature_ptr->type);
			break;
	};
}

void creatureProcessList()
{
	PersistentGameState *state = memoryGetPersistentGameState();
	Creature *creature_ptr;
	int last_creature = state->creature_count;
	for(int i = 0; i < last_creature; i++)
	{
		creature_ptr = creatureGet(i);
		if(creature_ptr)
		{
			if(creature_ptr->level == state->current_level)
			{
				creatureProcess(i);
			}
		}
		else
		{
			last_creature++;
		}
	}
}

int creatureCheckCollision(Transform *transform)
{
	PersistentGameState *state = memoryGetPersistentGameState();
	Creature *creatures = memoryGetCreatures();
	int collision = 0;

	int last_creature = state->creature_count;
	for(int i = 0; i < last_creature; i++)
	{
		Creature *creature_ptr = creatureGet(i);
		if(creature_ptr)
		{
			if(creature_ptr->id != transform->id &&
			   creature_ptr->level == transform->level &&
			   transformCheckCollision(transform, (Transform *)creature_ptr))
			{
				collision = 1;
			}
		}
		else
		{
			last_creature++;
		}
	}

	return collision;
}

int creatureDrawHealthbar(Creature *creature)
{
	GraphicsState *sdl_state = memoryGetGraphicsState();

	Vector2f screenPos = transformGetScreenPosition((Transform *) creature);

	SDL_FRect r;
	r.w = 80;	
	r.h = 20;
    r.x = screenPos.x - r.w/2;
	r.y = screenPos.y + 10 - r.h/2;

	// Set render color to blue ( rect will be rendered in this color )
	SDL_SetRenderDrawColor( sdl_state->renderer, 0, 0, 255, 255 );

	// Render rect
	SDL_RenderFillRectF( sdl_state->renderer, &r );
}
